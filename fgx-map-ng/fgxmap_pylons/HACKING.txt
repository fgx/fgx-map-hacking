=================================================
## Hacking
=================================================

This wsgi application is built with Pylons.
Whilst this is an older architecture, it is more fitting for
use with fgxmap, mainly because it is easy to create threads as background
processes easily. 
It also used native libs, instead of plugins as in other frameworks = less external dependancy nightmare..


## Programmers Guidelines: 
* Please use tabs for spacing if possible

This application consists of many parts, as follows
* all server install that runs a python pylons wsgi server
* the html page
** Which loads a whole heap of javascript images etc from various places
* The ajax service
* The on demand database queries
* The map tilecache urls 
* the configuration..

Goals..
Make it stateless on server, ie we try not to use sessions.. on server..
However we can plant these as cookies on machine..
Make it as fast as possible..
Ensure errors are reported.. so we can make it bug free
Make is a nice clean structure, even though its a bit all over the place with pylons..
Make it easy to josin in.. the dev process

Future..
Make it easy to install, and aqquire data from upstream instead of having to do all the hassle..




-------------------------
Content Delivey network
-------------------------
Libraies, icons etc are loaded from external servers. as part of the CDN,
eg
the famfam icons are at http://ico.freeflightsim.org
the static lits from fgx-static are at http://fgx-static.freeflightsim.org



--------------------------
Static Files
--------------------------


The public/ directory contains all the static stuff eg favicon, js/, css, images, etc
Anything in here is read first, and if there, is send to browser
(in production this is statically mapped with nginx, apache probably not)


--------------------------
routing.py
--------------------------
Then in config/routing.py, are the path mapping for the url to the 
eg the following two example, first for ajax, second for html
map.connect('/map', controller="html_pages", action="map")
map.connect('/ajax/mp/flights', controller="ajax_mp", action="flights")
map.connect('/ajax/fix/{fix}', controller="ajax_nav", action="fix")


--------------------------
controller
--------------------------
The "controller" is in the class/file in the "controllers/" directory 
eg
controllers/html_pages.py
controllers/ajax_mp.py


The controller are named after the fileName Hungarian style 
eg
class HtmlPagesController()
class AjaxMpController()
class AjaxNavController()

to create a new controller run
> paster controller my_controller 

--------------------------
action
--------------------------
The "action" is the function of the class
eg
## renders a jinja2 template from the tempaltes/ directory
def index(self):
	return render("map-ext.html") 

## returns the dict of data as json using the decorator
@jsonify
def flights(self):
	payload = dict(success=True, 
					flights=mylib.get_flights_function() )
	return payload 


## returns the fix info
@jsonify
def fix(self, fix=None):
	payload = dict(success=True, 
					flights=mylib.get_flights_function() )
	return payload 


--------------------------
Database
--------------------------

The database models are contained in
models/__init__.py
Yes, a lot of models in one file, but this makes it easier to import..
This is where native sqlalchemy, geoalchemy objects exist.
@property is cool



The http://www.geoalchemy.org/ is also included for geometry types

